'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'F:\\Course\\College\\7th Semester\\Project\\eVoting1\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',
    value: function renderCampaigns() {
      //const src = 'https://bit.ly/2TOvL56';
      //const src = "https://picsum.photos/400/60?random=1";    //random image generator
      var src = 'https://picsum.photos/id/192/400/60';
      var items = this.props.campaigns.map(function (address) {
        return {
          // header: address,
          // description: (
          //   <Link route={`/campaigns/${address}`}>
          //     <a>View Campaign</a>
          //   </Link>
          // ),
          // fluid: true
          header: address,
          image: { src: src },
          description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, 'View campaign')),
          color: 'red',
          fluid: true,
          style: { overflowWrap: 'break-word', backgroundColor: 'rgba(255, 214, 56, 1)' }
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 3, __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, _react2.default.createElement(_semanticUiReact.Image, { src: 'https://bit.ly/3rmKu3t', __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      })), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 13, __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      }, _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, 'Decentralized applications (dApps) are digital applications or programs that exist and run on a blockchain or P2P network of computers instead of a single computer, and are outside the purview and control of a single authority.'), _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, 'A standard web app, such as Uber or Twitter, runs on a computer system which is owned and operated by an organization, giving it full authority over the app and its workings. There may be multiple users on one side, but the backend is controlled by a single organization. '), _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, 'DApps can run on a P2P network or a blockchain network. For example, BitTorrent, Tor and Popcorn Time are applications that run on computers that are part of a P2P network, whereby multiple participants are consuming content, feeding or seeding content, or simultaneously performing both functions.'), _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, 'In the context of cryptocurrencies, dApps run on a blockchain network in a public, open source, decentralized environment and are free from control and interference by any single authority. For example, a developer can create a Twitter-like dApp and put it on a blockchain where any user can publish messages. Once posted, no one\u2014including the app creators\u2014can delete the messages.'))), _react2.default.createElement(_semanticUiReact.Divider, { horizontal: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 72
        }
      }, _react2.default.createElement(_semanticUiReact.Header, { as: 'h2', __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      }, _react2.default.createElement(_semanticUiReact.Icon, { name: 'tag', __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }), 'Open Campaigns')), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 13, __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, this.renderCampaigns()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 3, __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { floated: 'right', basic: true, color: 'black', icon: true, labelPosition: 'left', __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, _react2.default.createElement(_semanticUiReact.Icon, { name: 'add circle', __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }), ' Create Campaign')))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var campaigns;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedCampaigns().call();

              case 2:
                campaigns = _context.sent;
                return _context.abrupt('return', { campaigns: campaigns });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwic3JjIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWducyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJpbWFnZSIsImRlc2NyaXB0aW9uIiwiY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2xvciIsImZsdWlkIiwic3R5bGUiLCJvdmVyZmxvd1dyYXAiLCJiYWNrZ3JvdW5kQ29sb3IiLCJHcm91cCIsInJlbmRlciIsIlJvdyIsIkNvbHVtbiIsIndpZHRoIiwiaG9yaXpvbnRhbCIsImFzIiwibmFtZSIsImZsb2F0ZWQiLCJiYXNpYyIsImljb24iLCJsYWJlbFBvc2l0aW9uIiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZENhbXBhaWducyIsImNhbGwiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsImdldEluaXRpYWxQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUxBLElBQUlBLGVBQWUsNkVBQW5COzs7QUFPQSxJQUFJQyxnQkFBZ0IsVUFBVUMsVUFBVixFQUFzQjtBQUN4QywwQkFBVUQsYUFBVixFQUF5QkMsVUFBekI7O0FBRUEsV0FBU0QsYUFBVCxHQUF5QjtBQUN2QixrQ0FBZ0IsSUFBaEIsRUFBc0JBLGFBQXRCOztBQUVBLFdBQU8seUNBQTJCLElBQTNCLEVBQWlDLENBQUNBLGNB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